{"name": "test_addCustomer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=120.0.6099.225)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3602142+3514994]\n\t(No symbol) [0x00007FF6C3220CE2]\n\t(No symbol) [0x00007FF6C30C74C3]\n\t(No symbol) [0x00007FF6C3112D29]\n\t(No symbol) [0x00007FF6C3106A0F]\n\t(No symbol) [0x00007FF6C3135FEA]\n\t(No symbol) [0x00007FF6C31063B6]\n\t(No symbol) [0x00007FF6C3136490]\n\t(No symbol) [0x00007FF6C31528F6]\n\t(No symbol) [0x00007FF6C3135D93]\n\t(No symbol) [0x00007FF6C3104BDC]\n\t(No symbol) [0x00007FF6C3105C64]\n\tGetHandleVerifier [0x00007FF6C362E16B+3695259]\n\tGetHandleVerifier [0x00007FF6C3686737+4057191]\n\tGetHandleVerifier [0x00007FF6C367E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6C33504F9+689705]\n\t(No symbol) [0x00007FF6C322C048]\n\t(No symbol) [0x00007FF6C3228044]\n\t(No symbol) [0x00007FF6C32281C9]\n\t(No symbol) [0x00007FF6C32188C4]\n\tBaseThreadInitThunk [0x00007FFD72E2257D+29]\n\tRtlUserThreadStart [0x00007FFD7462AA58+40]", "trace": "self = <TestCases.test_add_customer.Test_003_AddCustomer object at 0x0000016B9C045BB0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"85e41932cdf73dd1c789392ed481036d\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    def test_addCustomer(self, setup):\n        self.logger.info(\"************* Test_003_AddCustomer **********\")\n        self.driver = setup\n        self.driver.get(self.BaseURl)\n    \n        self.lp = LoginPage(self.driver)\n        self.lp.setUsername(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        self.logger.info(\"************* Login succesful **********\")\n    \n        self.logger.info(\"******* Starting Add Customer Test **********\")\n    \n        self.addcust = AddCustomer(self.driver)\n        self.addcust.clickOnCustomersMenu()\n        time.sleep(2)\n>       self.addcust.clickOnCustomersMenuItem()\n\nTestCases\\test_add_customer.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\AddNewCustomerPage.py:40: in clickOnCustomersMenuItem\n    EC.presence_of_element_located((By.XPATH,self.lnkCustomers_menuitem_xpath))).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B9C057650>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6C32188C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD72E2257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD7462AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=120.0.6099.225)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3602142+3514994]\nE       \t(No symbol) [0x00007FF6C3220CE2]\nE       \t(No symbol) [0x00007FF6C30C74C3]\nE       \t(No symbol) [0x00007FF6C3112D29]\nE       \t(No symbol) [0x00007FF6C3106A0F]\nE       \t(No symbol) [0x00007FF6C3135FEA]\nE       \t(No symbol) [0x00007FF6C31063B6]\nE       \t(No symbol) [0x00007FF6C3136490]\nE       \t(No symbol) [0x00007FF6C31528F6]\nE       \t(No symbol) [0x00007FF6C3135D93]\nE       \t(No symbol) [0x00007FF6C3104BDC]\nE       \t(No symbol) [0x00007FF6C3105C64]\nE       \tGetHandleVerifier [0x00007FF6C362E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6C3686737+4057191]\nE       \tGetHandleVerifier [0x00007FF6C367E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6C33504F9+689705]\nE       \t(No symbol) [0x00007FF6C322C048]\nE       \t(No symbol) [0x00007FF6C3228044]\nE       \t(No symbol) [0x00007FF6C32281C9]\nE       \t(No symbol) [0x00007FF6C32188C4]\nE       \tBaseThreadInitThunk [0x00007FFD72E2257D+29]\nE       \tRtlUserThreadStart [0x00007FFD7462AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "bffadc58-0378-4963-8619-fedf6e337882-attachment.txt", "type": "text/plain"}], "start": 1707482897423, "stop": 1707482905534, "uuid": "c3534917-89d1-4a39-91dc-efd8b1496312", "historyId": "31572f5462d4cb3ec5fdd628a0e98f9e", "testCaseId": "31572f5462d4cb3ec5fdd628a0e98f9e", "fullName": "TestCases.test_add_customer.Test_003_AddCustomer#test_addCustomer", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_add_customer"}, {"name": "subSuite", "value": "Test_003_AddCustomer"}, {"name": "host", "value": "LAPTOP-F9EOK3J8"}, {"name": "thread", "value": "13432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_add_customer"}]}